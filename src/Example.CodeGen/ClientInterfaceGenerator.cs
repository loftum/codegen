using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Example.CodeGen;

/// <summary>
/// Generates interfaces from all classes named *Target
/// </summary>
[Generator]
public class ClientInterfaceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var referencedTargets = context.CompilationProvider.Select((compilation, _) =>
        {
            return compilation.SourceModule.ReferencedAssemblySymbols
                .Where(a => a.Name.StartsWith("Example"))
                .SelectMany(a => a.GetTargets());
        });
        
        context.RegisterSourceOutput(referencedTargets, AddInterfaceSource);

        var localTargets = context.SyntaxProvider.CreateSyntaxProvider(
            (node, c) => node is ClassDeclarationSyntax cladass && cladass.Identifier.Text.EndsWith("Target"),
            (syntaxContext, c) => syntaxContext.Node as ClassDeclarationSyntax
        );
        
        context.RegisterSourceOutput(localTargets, AddInterfaceSource);

    }

    private static void AddInterfaceSource(SourceProductionContext context, ClassDeclarationSyntax? syntax)
    {
        if (syntax == null)
        {
            return;
        }
        
        context.AddSource($"{syntax.GetFullName()}.Client.g.cs", GenerateInterface(syntax));
    }
    
    private static string GenerateInterface(ClassDeclarationSyntax syntax)
    {
        var namespaceName = syntax.TryGetNamespaceName(out var v) ? $"{v}.Clients" : "Pølse.Clients";
        var source = new SourceWriter()
            .AppendLine($"namespace {namespaceName};")
            .AppendLine()
            .AppendLine("// Generated by really, really eager small hamsters")
            .AppendLine()
            .AppendLine($"public interface I{syntax.Identifier.Text}Client");
        using (source.Block())
        {
            foreach (var method in syntax.Members
                         .OfType<MethodDeclarationSyntax>()
                    )
            {
                var parameters = string.Join(", ", method.ParameterList.Parameters.Select(p => $"{p.Type} {p.Identifier}")); 
                source.AppendLine($"{method.ReturnType} {method.Identifier}({parameters});");
            }
        }

        return source.ToString();
    }

    private static void AddInterfaceSource(SourceProductionContext context, IEnumerable<INamedTypeSymbol> targets)
    {
        foreach (var target in targets)
        {
            if (context.CancellationToken.IsCancellationRequested)
            {
                return;
            }
            context.AddSource($"{target}.Client.g.cs", GenerateInterface(target));
        }
    }

    private static string GenerateInterface(INamedTypeSymbol target)
    {
        var source = new SourceWriter()
            .AppendLine($"namespace {target.ContainingNamespace}.Targets;")
            .AppendLine()
            .AppendLine("// Generated by really, really eager small hamsters")
            .AppendLine()
            .AppendLine($"public interface I{target.Name}Client");
        using (source.Block())
        {
            foreach (var method in target.GetMembers()
                         .OfType<IMethodSymbol>()
                         .Where(m => m is {IsStatic: false, MethodKind: MethodKind.Ordinary}))
            {
                var parameters = string.Join(", ", method.Parameters.Select(p => $"{p.Type} {p.Name}")); 
                source.AppendLine($"{method.ReturnType} {method.Name}({parameters});");
            }
        }

        return source.ToString();
    }
}

